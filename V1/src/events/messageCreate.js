const { signPacte, getPendingPactes } = require('../services/userManager');
const logger = require('../utils/logger');

module.exports = {
    name: 'messageCreate',
    async execute(message) {
        if (message.author.bot) return;
        
        // Check for "Je signe" message
        if (message.content.trim().toLowerCase() === 'je signe') {
            const client = message.client;
            
            try {
                // R√©cup√©rer les pactes en attente depuis la DB (source de v√©rit√©)
                const pendingPactes = await getPendingPactes(message.channel.id);
                
                // Chercher un pacte que cet utilisateur peut signer
                let foundPacte = null;
                for (const pacte of pendingPactes) {
                    // V√©rifier si l'utilisateur est participant et n'a pas encore sign√©
                    if (pacte.participants.includes(message.author.id) && 
                        !pacte.signed_participants.includes(message.author.id)) {
                        foundPacte = pacte;
                        break;
                    }
                }
                
                if (!foundPacte) {
                    // Pas de pacte √† signer pour cet utilisateur
                    return;
                }
                
                // Tenter la signature
                const result = await signPacte(foundPacte.id, message.author.id);
                
                await message.react('‚úÖ');
                
                if (!result.allSigned) {
                    // Pas encore tous sign√©s, afficher le progr√®s
                    await message.reply({
                        content: `‚úÖ **Signature confirm√©e !** (${result.signedCount}/${result.totalParticipants})\n` +
                                `En attente de ${result.totalParticipants - result.signedCount} signature(s) suppl√©mentaire(s).`,
                        allowedMentions: { repliedUser: false }
                    });
                } else {
                    // Tous ont sign√©, pacte activ√©
                    
                    // Nettoyer la m√©moire
                    if (client.pendingPactes) {
                        client.pendingPactes.delete(foundPacte.id);
                    }
                    
                    // Notification dans le canal de logs
                    const logChannel = message.guild.channels.cache.get(process.env.LOG_CHANNEL_ID);
                    if (logChannel) {
                        await logChannel.send({
                            content: `‚öîÔ∏è **PACTE ACTIV√â** - Pacte #${foundPacte.id}\n` +
                                    `üéØ Objectif : ${foundPacte.objective} victoires cons√©cutives\n` +
                                    `üë• Participants : ${result.participantNames || result.totalParticipants + ' joueurs'}\n` +
                                    `Que la qu√™te commence !`
                        });
                    }
                    
                    await message.channel.send('‚ú® **Pacte scell√© !** Que l\'Ab√Æme Hurlant guide vos pas vers la victoire !');
                }
                
            } catch (error) {
                logger.error('Error signing pacte:', error);
                
                // Si l'erreur indique que l'utilisateur a d√©j√† sign√©
                if (error.message.includes('d√©j√† sign√©')) {
                    await message.react('‚ö†Ô∏è');
                    return message.reply({
                        content: '‚ö†Ô∏è Vous avez d√©j√† sign√© ce pacte !',
                        allowedMentions: { repliedUser: false }
                    });
                }
                
                await message.reply({
                    content: '‚ùå Erreur lors de la signature. Veuillez r√©essayer.',
                    allowedMentions: { repliedUser: false }
                });
            }
        }
    }
};
